type User {
  pipes: [Pipe!]!
}

type Mutation {
  createPipe(input: CreatePipeInput!): Pipe!
}

type Pipe {
  id: ID!
  flags: Flags!
  name: String!
  sources: [Source!]!
  destinations: [SlackChannel!]!
}

input CreatePipeInput {
  flag: CreateFlagInput!
  name: String!
  sources: [CreateSourceInput!]!
}

input CreateFlagInput {
  enabled: Boolean!
}

input CreateSourceInput {
  account: String!
  filters: CreateFiltersInput!
}

input CreateFiltersInput {
  num: CreateNumberFilter!
  text: CreateTextFilter!
}

input CreateNumberFilter {
  name: String!
  op: String!
  num: Int!
}

input CreateTextFilter {
  name: String!
  op: String!
  text: String!
}

type Flags {
  enabled: Boolean!
}

type Source {
  id: ID!
  kind: String!
  connection: PlaidConnection
  account: PlaidAccount!
  filters: [Filter!]!
}

union Filter = TextFilter | StringFilter

interface Filter {
  id: ID!
  name: String!
  op: String!
}

type NumberFilter implements Filter {
  id: ID!
  name: String!
  op: String!
  num: Int!
}

type TextFilter implements Filter {
  id: ID!
  name: String!
  op: String!
  text: String!
}

type Destination {
  id: ID!
  conn: SlackConnection!
  channel: SlackChannel!
  kind: String!
}
