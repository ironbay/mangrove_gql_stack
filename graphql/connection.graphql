type User {
  connections: [Connection!]!
}

union Connection = PlaidConnection | SlackConnection

interface Connection {
  id: ID!
  kind: String!
}

type Mutation {
  startPlaidAuth(input: StartPlaidAuthInput!): StartPlaidAuth!
  finishPlaidAuth(input: FinishPlaidAuthInput!): FinishPlaidAuth!
  removePlaidConnection(
    input: RemovePlaidConnectionInput!
  ): RemovePlaidConnection!
  startSlackAuth(input: StartSlackAuthInput!): StartSlackAuth!
}

input StartPlaidAuthInput {
  user: String!
}

type StartPlaidAuth {
  link_token: String!
  state: String!
}

input FinishPlaidAuthInput {
  user: String!
  public_token: String!
}

type FinishPlaidAuth {
  item_id: String!
}

type RemovePlaidConnection {
  id: ID!
  user_id: String!
}

input RemovePlaidConnectionInput {
  id: ID!
  user_id: String!
}

type PlaidConnection implements Connection {
  id: ID!
  kind: String!
  institution: String!
  accounts: [PlaidAccount!]!
}

type PlaidAccount {
  id: ID!
  name: String!
  category: String!
  subcategory: String!
}

input StartSlackAuthInput {
  user: String!
}

type StartSlackAuth {
  user: String!
  url: String!
}

type SlackConnection implements Connection {
  id: ID!
  kind: String!
  name: String!
  channels: [SlackChannel!]!
}

type SlackChannel {
  id: ID!
  name: String!
  topic: String!
  num_members: Int!
}
